@using FluentValidation;
@using Jmcarrasc0.Cryptography;
@using Jmcarrasc0.Portal.Data;
@using Jmcarrasc0.Portal.Models;
@using Jmcarrasc0.Portal.Services;
@using Microsoft.AspNetCore.WebUtilities;
@using System.Collections;
@inject IJSRuntime JS
@inject PortalContext db
@inject NavigationManager NavigationManager
@inject Mensajeria m
@inject Jmcarrasc0.Blazor.Loading.LoadingServices loadingService



<!--Registrer Modal -->
<div class="modal fade" id="registrermodal" tabindex="-1" aria-labelledby="registrerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="registrerModalLabel">Registrarse</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <EditForm class="needs-validation" Model="@usuario" OnValidSubmit="@GuardarRegistro">
                <div class="modal-body">


                    <FluentValidationValidator @ref="fluentValidationValidator" DisableAssemblyScanning="@true" />
                    <div class="bs-danger-text-emphasis h6">
                        <ValidationSummary />
                    </div>

                    <div class="mb-3">
                        <div class="row">
                            <div class="col-auto">
                                <label class="form-label">Nombre</label>
                                <InputText @bind-Value="usuario.Nombre" class="form-control" />

                            </div>
                            <div class="col-auto">
                                <label class="form-label">Apellido</label>
                                <InputText @bind-Value="usuario.Apellido" class="form-control" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="row">
                            <div class="col-auto">
                                <label class="form-label">Correo Electronico</label>
                                <InputText @bind-Value="usuario.Correo" class="form-control" />
                            </div>
                            <div class="col-auto">
                                <label class="form-label">Username</label>
                                <InputText @bind-Value="usuario.UserName" class="form-control" />
                            </div>
                        </div>
                    </div>
                    @foreach (var i in usuario.UsuarioPass)
                    {

                        <div class="form-group">
                            <div class="mb-3">
                                <label class="form-label">Contraseña</label>
                                <InputText @bind-Value="i.Pass" class="form-control" id="validationPassword" name="password" type="password" minlength="8" placeholder="Contraseña" />

                                <div class="progress" style="height: 5px;">
                                    <div id="progressbar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 10%;" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                                <div id="feedbackin" class="valid-feedback">
                                    Contraseña segura!
                                </div>
                                <div id="feedbackirn" class="invalid-feedback">
                                    Al menos 8 caracteres,
                                    Número, Carácter Especial
                                    Mayúsculas y Minúsculas
                                </div>
                                <small id="passwordHelpBlock" class="form-text text-muted">
                                    Su contraseña debe tener entre 8 y 20 caracteres y debe contener caracteres especiales. "!@@#$%&*_?", sólo números, letras mayúsculas y minúsculas.
                                </small>
                            </div>
                        </div>

                    }

                    <div id="emailHelp" class="form-text">Nunca compartiremos tu correo electrónico con nadie.</div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Registrar</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                </div>
            </EditForm>

        </div>
    </div>
</div>

@code {

    IJSObjectReference recaptcha;

    private readonly Usuarios usuario = new Usuarios() { UsuarioPass = new List<UsuarioPass> { new UsuarioPass { IDUsuarioPass = Guid.NewGuid() } } };

    private FluentValidationValidator? fluentValidationValidator;

    public string icon = "bi bi-gear-wide";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            recaptcha = await JS.InvokeAsync<IJSObjectReference>("import", "./js/password.js");
            await recaptcha.InvokeVoidAsync("pwd");
        }
    }

    private async Task GuardarRegistro()
    {
        loadingService.Show();

       
        StateHasChanged();
        var crypt = new Cryptography();

        if (usuario != null)
        {


            string pw = "";

            foreach (var i in usuario.UsuarioPass)
            {
                pw = i.Pass;
            }

            try
            {

                var guid = Guid.NewGuid();
                await db.Usuarios.AddAsync(new Usuarios
                    {

                        IDUsuario = guid,
                        UserName = usuario.UserName.Trim(),
                        Nombre = usuario.Nombre,
                        Apellido = usuario.Apellido,
                        Correo = usuario.Correo,
                        CreatedOn = DateTime.Now,

                        UsuarioPass = new List<UsuarioPass>{
                    new UsuarioPass{
                    IDUsuarioPass=Guid.NewGuid(),
                    Pass=crypt.HashPassword(pw),
                    CreatedBy=guid,
                    CreatedOn=DateTime.Now}},

                        UsuarioEstatus = new List<UsuarioEstatus>{
                        new  UsuarioEstatus{

                            IDUsuarioEstatus = Guid.NewGuid(),
                            IDEstatus = db.Estatus.FirstOrDefault(e=>e.Nombre.Equals("Sin Autenticar")).IDEstatus,
                            CreatedOn = DateTime.Now,
                            CreatedBy =guid
                        }},
                        UsuarioRoles = new List<UsuarioRoles>{
                        new  UsuarioRoles
                        {IDUsuarioRol = Guid.NewGuid(),
                            IDRol = db.Roles.FirstOrDefault(r=>r.Nombre.Equals("Administrador")).IDRol,
                            CreatedBy = guid,
                            CreatedOn = DateTime.Now
                        }}


                    });




                if (m.EnviarCorreoBienvenida(usuario.Nombre, usuario.Apellido, usuario.UserName.Trim(), usuario.Correo, guid.ToString()) == true)
                {
                    await db.SaveChangesAsync();
                }


                var consulta = new Dictionary<string, string>
{
                    {"NombreCompleto",usuario.Nombre + " " + usuario.Apellido},
                    {"Correo",usuario.Correo},
                    {"UserName",usuario.UserName}

                };

                StateHasChanged();

                NavigationManager.NavigateTo(QueryHelpers.AddQueryString("/Bienvenida", consulta), true);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
            finally
            {
                loadingService.Hide();
            }


        }

    }

}
