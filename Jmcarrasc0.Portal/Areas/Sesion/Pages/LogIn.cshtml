@page
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Security.Claims
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.DataProtection
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using Jmcarrasc0.Portal.Data
@using Jmcarrasc0.Cryptography
@attribute [AllowAnonymous]
@inject PortalContext db
@inject IConfiguration c


@functions {

    public async Task<IActionResult> OnGetAsync(string paramSesion, string paramClave)
    {
        var crypt = new Cryptography();
        string returnUrl = Url.Content("~/");
        if (paramSesion == null || paramClave == null) return LocalRedirect(returnUrl);
        var l = await db.UsuarioPass.Include(p => p.IDUsuarioNavigation)
            .FirstOrDefaultAsync(x => x.IDUsuario.Equals(Guid.Parse(paramSesion)));

        if (crypt.VerifyHashedPassword(l.Pass, crypt.Decrypt(paramSesion, paramClave)))
        {
            try
            {
                // Clear the existing external cookie
                await HttpContext
                    .SignOutAsync(
                        CookieAuthenticationDefaults.AuthenticationScheme);
            }
            catch { }

            var claims = new List<Claim>()
                {
                    new Claim(ClaimTypes.Name, $"{l.IDUsuarioNavigation.Nombre} {l.IDUsuarioNavigation.Apellido}"),
                    new Claim(ClaimTypes.NameIdentifier, l.IDUsuario.ToString()),
                    new Claim(ClaimTypes.Email, l.IDUsuarioNavigation.Correo)
                };

            var rol = await db.Usuarios.Include(r => r.UsuarioRoles).ThenInclude(r => r.IDRolNavigation).FirstOrDefaultAsync(u => u.IDUsuario.Equals(l.IDUsuario));

            rol.UsuarioRoles.ToList().ForEach(r =>
            {
                claims.Add(new Claim(ClaimTypes.Role, r.IDRolNavigation.Nombre.ToString()));
            });


            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var authProperties = new AuthenticationProperties
                {
                    //AllowRefresh = <bool>,
                    // Refreshing the authentication session should be allowed.

                    //ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(10),
                    // The time at which the authentication ticket expires. A
                    // value set here overrides the ExpireTimeSpan option of
                    // CookieAuthenticationOptions set with AddCookie.

                    //IsPersistent = true,
                    // Whether the authentication session is persisted across
                    // multiple requests. When used with cookies, controls
                    // whether the cookie's lifetime is absolute (matching the
                    // lifetime of the authentication ticket) or session-based.

                    //IssuedUtc = <DateTimeOffset>,
                    // The time at which the authentication ticket was issued.


                    RedirectUri = this.Request.Host.Value
                    //RedirectUri = <string>
                    // The full path or absolute URI to be used as an http
                    // redirect response value.
                };
            try
            {
                await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(identity), authProperties);

            }
            catch (Exception ex)
            {
                string error = ex.Message;
            }

            // if (l.IDUsuarioNavigation.Compañia.Equals("Primer Registro"))
            // {
            //     return LocalRedirect("/Perfil");
            // }
            // else
            // {
            //     return LocalRedirect(returnUrl);
            // }

        }
        return LocalRedirect(returnUrl);
    }
}