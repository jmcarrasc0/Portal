@using Jmcarrasc0.Portal.Data;
@using Jmcarrasc0.Portal.Models.Customizeds;
@using Jmcarrasc0.Portal.Services;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.JSInterop;
@using Jmcarrasc0.Cryptography;
@using FluentValidation;
@using System.Web;
@inject IJSRuntime JS
@inject PortalContext db
@inject NavigationManager NavigationManager
@inject Mensajeria m
@inject Jmcarrasc0.Blazor.Loading.LoadingServices loadingService


<!--Login Modal -->


<div class="modal fade" id="loginmodal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="loginModalLabel">Iniciar Sesión</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="loginModel" OnValidSubmit="LogIn">
                <FluentValidationValidator @ref="fluentValidationValidator" DisableAssemblyScanning="@true" />
                <div class="bs-danger-text-emphasis h6">
                    <ValidationSummary />
                </div>

                <div class="modal-body">

                    <div class="mb-3">
                        <label for="loginModel.Usuario" class="form-label">Correo Electronico</label>
                        <InputText @bind-Value="loginModel.Usuario" type="email" class="form-control" id="loginModel.Usuario" aria-describedby="emailHelp" />
                        <div id="emailHelp" class="form-text">Nunca compartiremos tu correo electrónico con nadie.</div>
                    </div>
                    <div class="mb-3">
                        <label for="loginModel.Password" class="form-label">Contraseña</label>
                        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" id="loginModel.Password" />
                    </div>


                    @if (isShow)
                    {
                        <div class="toast position-fixed bottom-0 end-1 p-3 show" role="alert" aria-live="assertive" aria-atomic="true" style="z-index: var(--bs-modal-zindex);">
                            <div class="toast-header">
                                <i class="bi bi-exclamation-triangle" style="color:red"></i>
                                <strong class="me-auto">Notificación</strong>
                                <small>hace segundos</small>
                                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>
                            <div class="toast-body">
                                @msn
                            </div>
                        </div>


                    }
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Iniciar Sesión</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {

    IJSObjectReference recaptcha;

    private FluentValidationValidator? fluentValidationValidator;

    Login loginModel = new Login() { };

    private string msn { get; set; }

    private bool isShow { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            recaptcha = await JS.InvokeAsync<IJSObjectReference>("import", "./js/reCAPTCHA.js");

        }
    }

    private async void LogIn()
    {
        loadingService.Show();
        StateHasChanged();
        var crypt = new Cryptography();


        if (loginModel != null)
        {

            //Validar que el usuario existe en la base de datos

            var l = await db.UsuarioPass.Include(p => p.IDUsuarioNavigation)
                .FirstOrDefaultAsync(w => w.IDUsuarioNavigation.Correo.ToLower().Equals(loginModel.Usuario.ToLower()) ||
                                          w.IDUsuarioNavigation.UserName.ToLower().Equals(loginModel.Usuario));


            if (l is null)
            {
                msn = "El Usuario no existe, intente con un correo o nombre de usuario válido";
                isShow = true;
                loadingService.Hide();
                StateHasChanged();
            }
            else if (crypt.VerifyHashedPassword(l.Pass, loginModel.Password))
            {
                db.UsuarioPassCounts.RemoveRange(db.UsuarioPassCounts.Where(p => p.IDUsuarioPass.Equals(l.IDUsuarioPass)));
                await db.SaveChangesAsync();

                var t = await db.UsuarioEstatus.Include(e => e.IDEstatusNavigation).ThenInclude(e => e.UsuarioEstatus)
                    .Include(u => u.IDUsuarioNavigation)
                    .FirstOrDefaultAsync(x => x.IDUsuario.Equals(l.IDUsuario) && x.IsActive);

                if (t.IDEstatusNavigation.Nombre.Equals("Suspendido"))
                {
                    msn = "Por Favor Contactanos";
                    isShow = true;
                    loadingService.Hide();
                    StateHasChanged();
                }
                else if (t.IDEstatusNavigation.Nombre.Equals("Sin Autenticar"))
                {
                    msn = "Cuenta sin autenticar por favor validar";
                    isShow = true;
                    loadingService.Hide();
                    StateHasChanged();
                }
                else if (t.IDEstatusNavigation.Nombre.Equals("Suspendido"))
                {
                    msn = "Por Favor Contactanos";
                    isShow = true;
                    loadingService.Hide();
                    StateHasChanged();
                }
                else if (t.IDEstatusNavigation.Nombre.Equals("Reinicio Clave"))
                {
                    msn = "Cuenta con proceso de reinicio de clave";
                    isShow = true;
                    loadingService.Hide();
                    StateHasChanged();
                }
                else if (t.IDEstatusNavigation.Nombre.Equals("Bloqueado") || t.IDEstatusNavigation.Nombre.Equals("Reinicio Clave Vencido"))
                {
                    msn = "Por favor haga clic en ¿Has olvidado tu contraseña?";
                    isShow = true;
                    loadingService.Hide();
                    StateHasChanged();
                }
                else if (t.IDEstatusNavigation.Nombre.Equals("Activo"))
                {
                    var endoc = HttpUtility.UrlEncode(l.IDUsuario.ToString());
                    var endocl = HttpUtility.UrlEncode(crypt.Encrypt(l.IDUsuario.ToString(), loginModel.Password));

                    isShow = true;
                    loadingService.Hide();
                    StateHasChanged();
                    NavigationManager.NavigateTo($"/Sesion/IniciarSesion?paramSesion={endoc}&paramClave={endocl}", true);
                }
            }
            else if (!crypt.VerifyHashedPassword(l.Pass, loginModel.Password))
            {

                if (db.UsuarioPassCounts.Count(p => p.IDUsuarioPass.Equals(l.IDUsuarioPass)) <= 3)
                {

                    await db.UsuarioPassCounts.AddAsync(new Models.UsuarioPassCounts
                        {
                            IDUsuarioPassCount = Guid.NewGuid(),
                            IDUsuarioPass = l.IDUsuarioPass,
                            createdOn = DateTime.Now
                        });
                    await db.SaveChangesAsync();


                    msn = $"Contraseña incorrecta, a los 4 intentos fallidos su cuenta se bloqueara, intentos disponibles {4 - db.UsuarioPassCounts.Count(p => p.IDUsuarioPass.Equals(l.IDUsuarioPass))}";
                    isShow = true;
                    loadingService.Hide();
                    StateHasChanged();

                }
                else if (db.UsuarioPassCounts.Count(p => p.IDUsuarioPass.Equals(l.IDUsuarioPass)) >= 4)
                {
                    var bq = db.Estatus.FirstOrDefaultAsync(e => e.Codigo.Equals(5000)).Result.IDEstatus;


                    var es = await db.UsuarioEstatus.FirstOrDefaultAsync(u => u.IDUsuario.Equals(l.IDUsuario) && u.IDEstatus.Equals(bq));

                    if (es != null)
                    {
                        msn = "Usuario Bloqueado por intentos fallidos";
                        isShow = true;
                        loadingService.Hide();
                        StateHasChanged();
                    }
                    else
                    {
                        var ts = db.UsuarioEstatus.Where(u => u.IDUsuario.Equals(l.IDUsuario) && u.IsActive).ToList();

                        foreach (var t in ts)
                        {
                            t.IsActive = false;
                            t.ModifiedBy = l.IDUsuario;
                            t.ModifiedOn = DateTime.Now;
                        }

                        db.UsuarioEstatus.UpdateRange(ts);

                        await db.UsuarioEstatus.AddAsync(new Models.UsuarioEstatus
                            {
                                IDUsuarioEstatus = Guid.NewGuid(),
                                IDUsuario = l.IDUsuario,
                                IDEstatus = bq,
                                CreatedBy = l.IDUsuario,
                                CreatedOn = DateTime.Now,
                                IsActive = true
                            });
                        await db.SaveChangesAsync();

                        msn = "Usuario Bloqueado por intentos fallidos";
                        isShow = true;
                        loadingService.Hide();
                        StateHasChanged();
                    }

                }

            }
        }


    }

}